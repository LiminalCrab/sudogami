<main>
		<div class="wiki-content">
			<span><p>Simple DirectMedia Layer is a cross playform development library designed to provide low level access to audio, keyboad, mouse, joystick, and graphics hardware via OpenDGL and Direct3D.</p></span>
			<h3> Resources <h3>
					<span><p><a href="">SDL Documentation</a></p></span>
			<h3>Useful Information</h3>
			<span><p>SDL begins with initalization, SDL_Init() must be called before other SDL functions. The role of SDL_Init() is to properly initalize the SDL Library and start each of the various subsystems requested with the call.
				The File I/O and Threading subsystems are initalized by default. To initalize other subsystems you must specifically call them. Multiple subsystems may be or'd with the OR operator in C, '|'. SDL_Init may fail if SDL_main() has not been defined as the entry for the program on certain operating systems. Calling SDL_SetMainReady() prior to SDL_Init() will circumvent this failure condition -- however, users should be careful when calling SDL_SetMainReady() as improper initalization may cause crashes and hard to diagnose problems. </p></span>

			<span><p>SDL_Quit() should be called before an SDL application exits safely, to shut down all the subsystems. It is not necessary to specifc individual subsystems using SDL_Quit(), it will automatically shut down all active subsystems. </p></span>

			<span><p> A window can be created by using SDL_CreateWindow(), which in term has a series of arguments that define the window position x and y, height and width, and the window state (shown, opengl usable with opengl windows, vulkan, ect.) SDL_WINDOW_SHOWN is ignored by SDL_CreateWindow(). The SDL_Window is implicity shown if WSDL_WINDOW_HIDDEN is not set. SDL_WINDOW_SHOWN may be quiered later using SDL_GetWindowsFlags(). Error checking is important, always check to see if the window is NULL or is not NULL. And always remember to destroy your window and ensure its destroyed by setting it to NULL when you're finished. </p></span>
			
			<span><p>SDL_CreateRenderer() is a function that takes the data of your created window, the index of the rendering driver (-1 to initalize the first one supporting the requested flags), and 0, one, or more SDL_RendererFlags which can be OR'd together. Such as SDL_RENDERER_SOFTWARE, and SDL_RENDERER_ACCELERATED.</p></span>
			
			<span><p>SDL_Surface and SDL_Texture are ways to represent pixel data. SDL_Surface is a struct that contains all raw pixel data along with some meta-information like size and pixel format. Since it's just raw pixel data, it's not optimized in anyway and should be avoided when rendering. SDL_Texture contains an efficient / optimized representation of the pixel data. SDL_Texture, it was introdued in SDL@.0 and enables hardware rendering.</p></span>
			
			<span><p></p></span>


		</div>
</div>
